const {getReplyOptions, onReplyWithComment} = require("./message-handlers");
const {safeErrorLog, getUserName} = require("./utils");
const {getText} = require("./localisation");
const mongoose = require("mongoose");
const {isReplyWithCommentRequest} = require("./validation");
const TelegramUser = mongoose.model('TelegramUser');
const Request = mongoose.model('Request');


async function processChatMessage(message, userStatus, bot) {
    const statusData = userStatus.split('_')
    const recipient = statusData[1]
    const isPaused = statusData[2]
    if (message.text && (message.text === "/close_chat" || message.text === "üìµ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥")) {
        await closeChat(message.from.id, recipient, bot)
    } else if (message.text && (message.text === "/pause_chat" || message.text === "‚èØÔ∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥")) {
        await pauseChat(message.from.id, recipient, bot)
    } else if (isReplyWithCommentRequest(message)) {
        await onReplyWithComment(message, bot);
    } else {
        if (isPaused) {
            await unpauseRequest(message, recipient, bot)
        } else {
            try {
                await bot.copyMessage(recipient, message.chat.id, message.message_id)
            } catch (e) {
                safeErrorLog(e)
            }
        }
    }
}

async function pauseChat(moderator, recipient, bot) {
    await TelegramUser.findOneAndUpdate({telegramID: recipient}, {status: 'chat_' + moderator + '_paused'});
    await TelegramUser.findOneAndUpdate({telegramID: moderator}, {status: ''});
    const replyOptions = await getReplyOptions('ua');
    try {
        await bot.sendMessage(
            moderator,
            '–î—ñ–∞–ª–æ–≥ –∑ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Ç—É –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ. ' +
            '–ô–æ–≥–æ –±—É–¥–µ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ, –∫–æ–ª–∏ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç—å –Ω–∞ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è',
            replyOptions,
        )
    } catch (e) { safeErrorLog(e) }
}

async function unpauseRequest(message, recipient, bot) {
    let inline_keyboard = [[
        { text: 'üì±Ô∏è –í—ñ–¥–Ω–æ–≤–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥', callback_data: 'UNPAUSE_' + message.from.id + '_' + message.message_id},
    ]];
    try {
        await bot.sendMessage(
            recipient,
            '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ' + getUserName(message.from) + ' –ø—Ä–∏—Å–ª–∞–≤ –≤–∞–º –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –ø—Ä–∏–∑—É–ø–∏–Ω–µ–Ω–æ–º—É –¥—ñ–∞–ª–æ–∑—ñ.\n–í—ñ–¥–Ω–æ–≤–∏—Ç–∏ —Ü–µ–π –¥—ñ–∞–ª–æ–≥?',
            {reply_markup: JSON.stringify({inline_keyboard})},
        )
    } catch (e) { safeErrorLog(e) }
}

async function unpauseCallback(callbackQuery, bot) {
    const data = callbackQuery.data.split('_');
    const message = callbackQuery.message
    const recipient = data[1];
    const moderator = callbackQuery.from.id;
    const messageId = data[2];
    await TelegramUser.findOneAndUpdate({telegramID: recipient}, {status: 'chat_' + moderator});
    await TelegramUser.findOneAndUpdate({telegramID: moderator}, {status: 'chat_' + recipient});
    try {
        await bot.editMessageReplyMarkup({}, {
            chat_id: message.chat.id,
            message_id: message.message_id
        })
        await bot.sendMessage(
            moderator,
            "–†–µ–∂–∏–º –¥—ñ–∞–ª–æ–≥—É –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ.",
            {
                reply_markup: {
                    resize_keyboard: true,
                    one_time_keyboard: false,
                    keyboard: [
                        [{ text: 'üìµ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'}],
                        [{ text: '‚èØÔ∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'}]
                    ]
                }
            }
        )
        await bot.copyMessage(moderator, recipient, messageId)
    } catch (e){ safeErrorLog(e) }
}

async function closeChat(user, recipient, bot) {
    await TelegramUser.findOneAndUpdate({telegramID: user}, {status: ''});
    const {language} = await TelegramUser.findOneAndUpdate({telegramID: recipient}, {status: ''});
    const replyOptions = await getReplyOptions('ua');
    try {
        await bot.sendMessage(user, '–î—ñ–∞–ª–æ–≥ –∑ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ', replyOptions)
    } catch (e) { safeErrorLog(e) }

    try {
        await getText('close_chat', language, async function(err, text){
            if (err) return safeErrorLog(err);
            await bot.sendMessage(recipient, text)
        });
    } catch (e) { safeErrorLog(e) }
}

async function onChatModeQuery(callbackQuery, bot) {
    const {data, message} = callbackQuery;
    const requestId = data.split('_')[1];
    const request = await Request.findById(requestId);
    if (!request) return
    const moderatorId = callbackQuery.from.id;
    const requesterId = request.requesterTG;
    let requester = await TelegramUser.findOne({telegramID: requesterId});
    let moderator = await TelegramUser.findOne({telegramID: moderatorId});
    if(!moderator || !requester) {
        let text = '–©–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...';
        try {
            return await bot.answerCallbackQuery(
                callbackQuery.id,
                {text: text, show_alert: true}
            );
        } catch (e) { return safeErrorLog(e) }
    }
    if (requester.status && requester.status.startsWith('chat_')) {
        let text = '–ß–∞—Ç –≤–∂–µ –∑–∞–π–Ω—è—Ç–∏–π —ñ–Ω—à–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º';
        if (requester.status.split('_')[1] === moderatorId.toString()) {
            text = '–í–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–ª–∏ —á–∞—Ç –∑ —Ü–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –î–ª—è –π–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /close_chat'
        }
        try {
            await bot.answerCallbackQuery(
                callbackQuery.id,
                {text: text, show_alert: true}
            );
        } catch (e) { safeErrorLog(e) }
    } else if (moderator.status && moderator.status.startsWith('chat_')) {
        let text = '–í–∏ –≤–∂–µ –≤—ñ–¥–∫—Ä–∏–ª–∏ —á–∞—Ç –∑ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º. –î–ª—è –π–æ–≥–æ –∑–∞–∫—Ä–∏—Ç—Ç—è –Ω–∞–ø–∏—à—ñ—Ç—å –±–æ—Ç—É /close_chat';
        try {
            await bot.answerCallbackQuery(
                callbackQuery.id,
                {text: text, show_alert: true}
            );
        } catch (e) { safeErrorLog(e) }
    } else {
        let text = '–î—ñ–∞–ª–æ–≥ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ, –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–π–¥—ñ—Ç—å —É –±–æ—Ç @perevir_bot';
        try {
            await bot.answerCallbackQuery(
                callbackQuery.id,
                {text: text, show_alert: true}
            );
        } catch (e) { safeErrorLog(e) }
        moderator.status = 'chat_' + requesterId;
        requester.status = 'chat_' + moderatorId;
        await moderator.save()
        await requester.save()
        try {
            await bot.forwardMessage(moderatorId, message.chat.id, request.moderatorMsgID);
        } catch (e) { safeErrorLog(e) }
        let moderatorText = '–ó–∞ —Ü–∏–º –∑–∞–ø–∏—Ç–æ–º —Ä–æ–∑–ø–æ—á–∞—Ç–æ –¥—ñ–∞–ª–æ–≥ –∑ —ñ–Ω—ñ—Ü—ñ–∞—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Ç—É.\n'
            + '–ù–∞–¥–∞–ª—ñ —Ç–µ–∫—Å—Ç –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –Ω–∞–¥—ñ—Å–ª–∞–Ω–∏—Ö —Å—é–¥–∏, –±—É–¥–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≤—ñ–¥ —ñ–º–µ–Ω—ñ –±–æ—Ç–∞\n'
            + '–î–ª—è —Ç–æ–≥–æ, —â–æ–± –≤–∏–π—Ç–∏ –∑ —Ä–µ–∂–∏–º—É –¥—ñ–∞–ª–æ–≥—É –Ω–∞–ø–∏—à—ñ—Ç—å /close_chat –∞–±–æ\n'
            + '/pause_chat –∞–±–æ —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É'
        try {
            await bot.sendMessage(
                moderatorId,
                moderatorText,
                {
                    reply_markup: {
                        resize_keyboard: true,
                        one_time_keyboard: false,
                        keyboard: [
                            [{ text: 'üìµ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'}],
                            [{ text: '‚èØÔ∏è –ü—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ –¥—ñ–∞–ª–æ–≥'}]
                        ]
                    }
                }
            )
        } catch (e) { safeErrorLog(e) }

        try {
            await getText('open_chat', requester.language, async function(err, text){
                if (err) return safeErrorLog(err);
                try {
                    await bot.sendMessage(requesterId, text);
                } catch (e) { safeErrorLog(e) }
            });
        } catch (e) { safeErrorLog(e) }

    }
}

module.exports = {
    processChatMessage,
    onChatModeQuery,
    unpauseCallback,
}
